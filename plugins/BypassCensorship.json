{
    "name": "绕过屏蔽词",
    "version": "1.0.0",
    "author": "码农小助手",
    "description": "在评论区选中屏蔽词即可绕过，该功能会占用评论字数（帮朋友代发，仅供学习使用）",
    "enabled": true,
    "init": "function() {\n    // 创建一个 MutationObserver 来监听 DOM 变化\n    const observer = new MutationObserver(function(mutations) {\n        mutations.forEach(function(mutation) {\n            // 检查新增的节点\n            mutation.addedNodes.forEach(function(node) {\n                // 确保节点是元素节点\n                if (node.nodeType === 1) {\n                    // 查找评论提交按钮容器\n                    const submitBtnOut = node.querySelector ? node.querySelector('.submit-btn-out__1gVe1') : null;\n                    if (!submitBtnOut) {\n                        // 如果当前节点不是，尝试在子节点中查找\n                        const submitBtnOuts = node.querySelectorAll ? node.querySelectorAll('.submit-btn-out__1gVe1') : [];\n                        if (submitBtnOuts.length > 0) {\n                            submitBtnOuts.forEach(processSubmitBtnOut);\n                        }\n                        return;\n                    }\n                    processSubmitBtnOut(submitBtnOut);\n                }\n            });\n        });\n    });\n\n    // 开始观察 DOM 变化\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n\n    // 处理找到的 submit-btn-out 元素\n    function processSubmitBtnOut(submitBtnOut) {\n        // 检查是否已经添加过按钮\n        if (submitBtnOut.dataset.bypassButtonAdded) return;\n        \n        submitBtnOut.dataset.bypassButtonAdded = \"true\";\n        \n        // 查找表情按钮容器\n        const biaoqingBtn = submitBtnOut.querySelector('.biaoqingBtn__uUrB9');\n        if (!biaoqingBtn) return;\n        \n        // 创建新的绕过屏蔽词按钮\n        const bypassButton = document.createElement('div');\n        bypassButton.className = 'bypass-censorship-btn__custom';\n        bypassButton.innerHTML = '<div class=\"capsule-button\">🔄 绕过屏蔽词</div>';\n        \n        // 设置胶囊形按钮样式\n        const capsuleStyle = `\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            height: 24px;\n            padding: 0 10px;\n            background: #f0f0f0;\n            border-radius: 12px;\n            cursor: pointer;\n            font-size: 12px;\n            margin-left: 3px;\n            user-select: none;\n            transition: all 0.3s;\n            border: none;\n        `;\n        \n        bypassButton.firstChild.style.cssText = capsuleStyle;\n        \n        // 添加悬停效果\n        bypassButton.addEventListener('mouseenter', function() {\n            this.firstChild.style.background = '#e0e0e0';\n        });\n        \n        bypassButton.addEventListener('mouseleave', function() {\n            this.firstChild.style.background = '#f0f0f0';\n        });\n        \n        // 添加点击事件处理\n        bypassButton.addEventListener('click', function(e) {\n            e.stopPropagation(); // 阻止事件冒泡\n            \n            // 查找评论输入框\n            const commentInput = document.querySelector('.input-comment-inner__3Hl94');\n            if (!commentInput) return;\n            \n            // 获取选中的文本\n            const start = commentInput.selectionStart;\n            const end = commentInput.selectionEnd;\n            const selectedText = commentInput.value.substring(start, end);\n            \n            // 如果没有选中文本，则弹出提示\n            if (selectedText.length === 0) {\n                alert('请先在输入框中选中需要处理的文本！');\n                return;\n            }\n            \n            // 使用两个零宽空格处理选中文本\n            let result = '';\n            for (let i = 0; i < selectedText.length; i++) {\n                result += selectedText[i];\n                if (i < selectedText.length - 1) {\n                    result += '\\u200B\\u200B'; // 使用两个零宽空格\n                }\n            }\n            \n            // 更新输入框内容\n            const newValue = commentInput.value.substring(0, start) + result + commentInput.value.substring(end);\n            commentInput.value = newValue;\n            \n            // 存储处理后的内容到自定义属性\n            commentInput.dataset.processedValue = newValue;\n            \n            // 重新设置光标位置\n            commentInput.selectionStart = start;\n            commentInput.selectionEnd = start + result.length;\n            \n            // 监听输入框的变化，防止内容被重置\n            if (!commentInput.dataset.listenerAdded) {\n                commentInput.dataset.listenerAdded = 'true';\n                \n                // 监听焦点事件\n                commentInput.addEventListener('focus', function() {\n                    // 确保处理后的内容不会被重置\n                    if (this.dataset.processedValue) {\n                        setTimeout(() => {\n                            this.value = this.dataset.processedValue;\n                        }, 0);\n                    }\n                });\n                \n                // 监听输入事件\n                commentInput.addEventListener('input', function() {\n                    // 更新存储的处理后内容\n                    if (this.dataset.processedValue) {\n                        this.dataset.processedValue = this.value;\n                    }\n                });\n            }\n            \n            // 显示处理完成的提示\n            this.firstChild.textContent = '✅ 已处理';\n            \n            // 弹出提示窗口告知用户需要手动输入新字符\n            setTimeout(() => {\n                this.firstChild.innerHTML = '🔄 绕过屏蔽词';\n                alert('处理完毕！请手动输入新字符以更新状态');\n            }, 1000);\n        });\n        \n        // 将按钮插入到表情按钮后面，紧挨着\n        biaoqingBtn.parentNode.parentNode.insertBefore(bypassButton, biaoqingBtn.parentNode.nextSibling);\n    }\n\n    // 初始加载时也处理一次页面上已有的元素\n    document.querySelectorAll('.submit-btn-out__1gVe1').forEach(processSubmitBtnOut);\n}"
}